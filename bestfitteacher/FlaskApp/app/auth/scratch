from datetime import datetime
import re
from flask import render_template, redirect, request, url_for,session, flash,jsonify
from flask_login import login_user, logout_user, login_required, \
    current_user
from . import auth
from functools import wraps
from .. import db
from ..models import User,Book
from ..email import send_email
from .forms import LoginForm, RegistrationForm, ChangePasswordForm,\
    PasswordResetRequestForm, PasswordResetForm, ChangeEmailForm
import uuid
import gc
from pptx import Presentation
import pdfkit
import json
from django.utils.encoding import smart_str, smart_unicode
from bs4 import BeautifulSoup
import urllib2
from jinja2 import Environment, FileSystemLoader
import os
import subprocess
from django.core.validators import URLValidator
import validators
from django.core.exceptions import ValidationError
# THIS_DIR = os.path.dirname(os.path.abspath(__file__))
# THIS_DIR = '/home/atul/Documents/SOFTWARE/OwnPrograms/APPLICATIONS/tbook2wbook/atul_flasky/app'
THIS_DIR=os.getcwd() +'/app'
stringdirectory=THIS_DIR + '/templates/toinsert.html'
stringtoinsert = open(stringdirectory, 'r').read()
# print(base_path)
# stringtoinsert = open(
#     '/home/atul/Documents/SOFTWARE/OwnPrograms/APPLICATIONS/loginsystem/login_v1/templates/toinsert.html', 'r').read()
class Flashcardqa:
    questionnum= 0
    question ="question"
    answer= "answer"

@auth.before_app_request
def before_request():
    if current_user.is_authenticated:
        current_user.ping()
        if not current_user.confirmed \
                and request.endpoint \
                and request.blueprint != 'auth' \
                and request.endpoint != 'static':
            return redirect(url_for('auth.unconfirmed'))


@auth.route('/unconfirmed')
def unconfirmed():
    if current_user.is_anonymous or current_user.confirmed:
        return redirect(url_for('main.index'))
    return render_template('auth/unconfirmed.html')


@auth.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            next = request.args.get('next')
            if next is None or not next.startswith('/'):
                # next = url_for('main.index')
                session['logged_in'] = True
                session['email']=form.email.data
                next= url_for('auth.bookslist')
            return redirect(next)
        flash('Invalid username or password.')
    return render_template('auth/login.html', form=form)


@auth.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.')
    session['logged_in'] = False
    return redirect(url_for('main.index'))


@auth.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(email=form.email.data,
                    username=form.username.data,
                    password=form.password.data)
        db.session.add(user)
        db.session.commit()
        token = user.generate_confirmation_token()
        send_email(user.email, 'Confirm Your Account',
                   'auth/email/confirm', user=user, token=token)
        flash('A confirmation email has been sent to you by email.')
        return redirect(url_for('auth.login'))
    return render_template('auth/register.html', form=form)


@auth.route('/confirm/<token>')
@login_required
def confirm(token):
    if current_user.confirmed:
        return redirect(url_for('main.index'))
    if current_user.confirm(token):
        db.session.commit()
        flash('You have confirmed your account. Thanks!')
    else:
        flash('The confirmation link is invalid or has expired.')
    return redirect(url_for('main.index'))


@auth.route('/confirm')
@login_required
def resend_confirmation():
    token = current_user.generate_confirmation_token()
    send_email(current_user.email, 'Confirm Your Account',
               'auth/email/confirm', user=current_user, token=token)
    flash('A new confirmation email has been sent to you by email.')
    return redirect(url_for('main.index'))


@auth.route('/change-password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            db.session.add(current_user)
            db.session.commit()
            flash('Your password has been updated.')
            return redirect(url_for('main.index'))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)


@auth.route('/reset', methods=['GET', 'POST'])
def password_reset_request():
    if not current_user.is_anonymous:
        return redirect(url_for('main.index'))
    form = PasswordResetRequestForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.generate_reset_token()
            send_email(user.email, 'Reset Your Password',
                       'auth/email/reset_password',
                       user=user, token=token,
                       next=request.args.get('next'))
        flash('An email with instructions to reset your password has been '
              'sent to you.')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_password.html', form=form)




@auth.route('/reset/<token>', methods=['GET', 'POST'])
def password_reset(token):
    if not current_user.is_anonymous:
        return redirect(url_for('main.index'))
    form = PasswordResetForm()
    if form.validate_on_submit():
        if User.reset_password(token, form.password.data):
            db.session.commit()
            flash('Your password has been updated.')
            return redirect(url_for('auth.login'))
        else:
            return redirect(url_for('main.index'))
    return render_template('auth/reset_password.html', form=form)


@auth.route('/change_email', methods=['GET', 'POST'])
@login_required
def change_email_request():
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.password.data):
            new_email = form.email.data
            token = current_user.generate_email_change_token(new_email)
            send_email(new_email, 'Confirm your email address',
                       'auth/email/change_email',
                       user=current_user, token=token)
            flash('An email with instructions to confirm your new email '
                  'address has been sent to you.')
            return redirect(url_for('main.index'))
        else:
            flash('Invalid email or password.')
    return render_template("auth/change_email.html", form=form)


@auth.route('/change_email/<token>')
@login_required
def change_email(token):
    if current_user.change_email(token):
        db.session.commit()
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('main.index'))


@auth.route('/bookslist', methods=['GET', 'POST'])
@login_required
def bookslist():
    try:
        thisuseremail = session['email']
        dataallcol = Book.query.filter_by(email=thisuseremail).all()
        return  render_template('auth/bookslist.html', data=dataallcol)
    except Exception as e:
        return render_template("500.html", error=e)
    # , TOPIC_DICT=TOPIC_DICT)
    # return render_template("auth/bookslist.html")

@auth.route('/showthebook/<yourbook>', methods=['GET', 'POST'])
@login_required
def showthebook(yourbook):
    return render_template("auth/showthebook.html",yourbook=yourbook)

@auth.route('/profilepage', methods=['GET', 'POST'])
@login_required
def profilepage():
    currentusername=session['email']
    return redirect(url_for('main.user',username=currentusername)) #("user.html",)

@auth.route('/uploadfileprocess', methods=['GET', 'POST'])
@login_required
def uploadfileprocess():
    if request.method == 'POST':
            # check if the post request has the file part
            if 'file' not in request.files:
                flash('No file part')
                return redirect(url_for('auth.uploadbooks'))
            file = request.files['file']
            # if user does not select file, browser also
            # submit a empty part without filename
            if file.filename == '':
                flash('No selected file')
                return redirect(url_for('auth.uploadbooks'))
            try:

                thisuseremail = session['email']
                thisuseremail = thisuseremail.replace("@", "at")
                thisuseremail = thisuseremail.replace(".", "dot")
                # thisuserdirectory='uploadedimages/' + thisuseremail
                thisuserdirectory = 'static'
                # '''uploadedimages/'
                target1 = os.path.join(THIS_DIR, thisuserdirectory)
                target = os.path.join(target1, thisuseremail)
                print(target)
                if not os.path.isdir(target):
                    os.mkdir(target)
                # c, conn = connection()
                for file in request.files.getlist("file"):
                    print(file)

                    # flash(thisfilecontent[-10:])


                    filename = file.filename
                    filename = filename.replace(" ", "")
                    thisfileuid = str(uuid.uuid4())[:8]
                    filename = filename[:-4] + thisfileuid + '.pdf'
                    filenamehtml = filename[:-3] + 'html'
                    destination = "/".join([target, filename])
                    destinationhtml = "/".join([target, filenamehtml])
                    print(destination)
                    file.save(destination)
                    subprocess.call(["pdf2htmlEX", "--zoom", "3", destination], shell=False)
                    subprocess.call(["mv", filenamehtml, destinationhtml], shell=False)

                    thisfileread = open(destinationhtml, 'r')

                    thisfilecontent = thisfileread.read()
                    thisfile = open(destinationhtml, 'w')
                    thisfilecontentend = thisfilecontent[-17:]
                    thisfilecontent = thisfilecontent[:-17]
                    # thisfilecontent = u'-'.join(thisfilecontent, stringtoinsert, thisfilecontentend)
                    thisfilecontent = thisfilecontent + stringtoinsert + thisfilecontentend
                    thisfile.write(smart_str(thisfilecontent))  # .decode('utf-8').encode('utf-8'))
                    thisfile.close()
                    bookname = filename[:-4]
                    thisemail = session['email']
                    thisbook = Book(email=thisemail,
                                bookname=bookname,
                                    booklocation=destinationhtml)
                    db.session.add(thisbook)
                    db.session.commit()
                    # q = ("INSERT INTO booknames (user_email,booklocation,bookname) VALUES (%s,%s,%s)")
                    # , username1,password1, email1, "/introduction-to-python/"'

                    # c.execute(q, (thwart(email1), thwart(destinationhtml), thwart(bookname)), )
                    # "INSERT INTO users (username,password,email,tracking) VALUES ('%s','%s','%s,'%s')" % thwart(username1),thwart(password1), thwart(email1), thwart("/introduction-to-python/"))
                    # conn.commit()
                    flash("File uploaded successfully!!")
                    # flash(data)
                # c.close()
                # conn.close()
                # gc.collect()
                return redirect(url_for('auth.bookdisplay', thisbookname=bookname))
            except Exception as e:
                return render_template("500.html", error=e)

@auth.route('/yourbook/<thisbookname>')
@login_required
def bookdisplay(thisbookname):
    try:

        thisuseremail = session['email']
        thisuseremail = thisuseremail.replace("@", "at")
        thisuseremail = thisuseremail.replace(".", "dot")
        thisuserdirectory = 'static'
        # target1 = os.path.join(THIS_DIR, thisuserdirectory)
        # target = os.path.join(target1, thisuseremail)
        filename = thisbookname + '.html'
        print(filename)
        session['currentbookname'] = filename
        filename = os.path.join(thisuseremail, filename)
        # flash(filename)
        # flash(thisfilecontent)
        # return  thisfilecontent
        # stringtoinsert
        # thisfilecontent
        return render_template("auth/showthebook.html", filename=filename)
    except Exception as e:
        return render_template("500.html", error=e)
@auth.route('/makeflashcard', methods=['GET', 'POST'])
@login_required
def makeflashcard():

    request_json = request.get_json()
    data = request_json
    # thisfiletemp = open("temp1.txt", 'w')
    # for in range(0,len(data)):
    # thisfiletemp.write(smart_str(data[0]['question']))
    # flash("XX")
    # thisfiletemp.close()


    thisuseremail = session['email']
    thisuseremail = thisuseremail.replace("@", "at")
    thisuseremail = thisuseremail.replace(".", "dot")
    thisuserdirectory = 'static'
    target1 = os.path.join(THIS_DIR, thisuserdirectory)
    target = os.path.join(target1, thisuseremail)
    filename = session['currentbookname']
    filename = filename[:-4] + 'json'
    # filenamejsaon = 'datap.json'
    destinationjson = "/".join([target, filename])
    with open(destinationjson, 'w') as outfile:
        json.dump(data, outfile)
    subprocess.call(["mv", filename, destinationjson], shell=False)
    # thisfile = open(destinationhtml, 'w')
    # # thisfilecontent = thisfile.read()
    # thisfile.write(name.decode('utf-8').encode('utf-8'))
    # thisfile.write(smart_str(name))
    # flash(name)
    # thisfile.close()
    return redirect(url_for('auth.makeppt'))

        # render_template("500.html", error=e)
    #


@auth.route('/showflashcard', methods=['GET', 'POST'])
@login_required
def showflashcard():

    thisuseremail = session['email']
    thisuseremail = thisuseremail.replace("@", "at")
    thisuseremail = thisuseremail.replace(".", "dot")
    thisuserdirectory = 'static'
    target1 = os.path.join(THIS_DIR, thisuserdirectory)
    target = os.path.join(target1, thisuseremail)
    filename = session['currentbookname']
    filenamepptx = filename[:-4] + 'pptx'
    urlforppt = os.path.join(thisuseremail, filenamepptx)
    filename = filename[:-4] + 'json'
    # filename="spring.json"
    destinationjson = "/".join([target, filename])
    destinationpptx = "/".join([target, filenamepptx])
    json_url = destinationjson
    # os.path.join(SITE_ROOT, destinationjson)
    data = json.load(open(json_url))
    urlforfc="/"
    listofflashcard = session['flashcarddata']
    # urlforppt="/"
    return render_template('flashcard.html',listofflashcard=listofflashcard, data=data,urlforfc=urlforfc,urlforppt=urlforppt)



@auth.route('/makeppt', methods=['GET', 'POST'])
@login_required
def makeppt():
    thisuseremail = session['email']
    thisuseremail = thisuseremail.replace("@", "at")
    thisuseremail = thisuseremail.replace(".", "dot")
    thisuserdirectory = 'static'
    target1 = os.path.join(THIS_DIR, thisuserdirectory)
    target = os.path.join(target1, thisuseremail)
    filename = session['currentbookname']
    filenamepptx=filename[:-4] + 'pptx'
    filename = filename[:-4] + 'json'
    # filenamejsaon = 'datap.json'
    destinationjson = "/".join([target, filename])
    destinationpptx = "/".join([target, filenamepptx])
    print(destinationjson)
    data = json.load(open(destinationjson))
    prs = Presentation()
    bullet_slide_layout = prs.slide_layouts[1]
    listofflashcard=[]

    data_length = len(data)
    for datap in range(0, data_length):
        flashcarddata = Flashcardqa()
        flashcarddata.questionnum = smart_str(data[datap]['qanumber'])
        flashcarddata.answer = smart_str(data[datap]['answer'])
        flashcarddata.question = smart_str(data[datap]['question'])
        listofflashcard.append(flashcarddata)
        slide = prs.slides.add_slide(bullet_slide_layout)
        shapes = slide.shapes

        title_shape = shapes.title
        body_shape = shapes.placeholders[1]
        title_shape.text = smart_str(data[datap]['qanumber'])
        tf = body_shape.text_frame
        tf.text = smart_str(data[datap]['question'])
        p = tf.add_paragraph()
        p.text = smart_str(data[datap]['answer'])
        p.level = 1


    prs.save(destinationpptx)
    session['flashcarddata']=listofflashcard

    return redirect(url_for('auth.showflashcard'))



@auth.route('/process', methods=['GET', 'POST'])
@login_required
def process():
    try:
        request_json = request.get_json()
        email = request_json['email']

        name = request_json['name']
        thisfiletemp = open("temp.txt", 'w')
        thisfiletemp.write(smart_str(name))
        # flash("XX")
        thisfiletemp.close()
        # return email
        name = '<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">' + name + '</html>'
        # name =name.encode('utf-8')
        newName = name

        thisuseremail = session['email']
        thisuseremail = thisuseremail.replace("@", "at")
        thisuseremail = thisuseremail.replace(".", "dot")
        thisuserdirectory = 'static'
        target1 = os.path.join(THIS_DIR, thisuserdirectory)
        target = os.path.join(target1, thisuseremail)
        filename = session['currentbookname']

        destinationhtml = "/".join([target, filename])
        jsonify({'name': name})

        thisfile = open(destinationhtml, 'w')
        # # thisfilecontent = thisfile.read()
        # thisfile.write(name.decode('utf-8').encode('utf-8'))
        thisfile.write(smart_str(name))
        flash(name)
        thisfile.close()
        # thisbookname=session['currentbookname']
        # dataallcol = Book.query.filter_by(bookname=thisbookname).first()
        # request.form['name']
        # subprocess.call(["echo", name[::-1], ">>","newhtml.html"], shell=False)
        if name and email:
            return "XX"
            # jsonify({'name' : name})

        return "XX"
    except Exception as e:
        return render_template("500.html", error=e)


@auth.route('/uploadwebaddress', methods=['GET', 'POST'])
@login_required
def uploadwebaddress():
    if request.method == 'POST':
        # check if the post request has the file part
        weblinkname = request.form['web_add_name']
        linkpdfname = request.form['web_name']
        linkpdfname = linkpdfname.replace(" ", "")
        # val = URLValidator(verify_exists=True)

        if not validators.url(weblinkname):
        # except ValidationError, e:
            flash('Invalid URL')
            return redirect(url_for('auth.uploadbooks'))
        # weblinkname=weblinkname.linkpdfname.replace(" ", "")
        if len(linkpdfname)<1:
            flash('Invalid file name')
            return redirect(url_for('auth.uploadbooks'))

        try:
            if request.form['web_add_name'] and request.form['web_name']:
                weblinkname = request.form['web_add_name']
                linkpdfname = request.form['web_name']
                linkpdfname=linkpdfname.replace(" ", "")
                thisfileuid=str(uuid.uuid4())[:8]
                linkpdfnamepdf = linkpdfname + thisfileuid +'.pdf'

                thisuseremail = session['email']
                thisuseremail = thisuseremail.replace("@", "at")
                thisuseremail = thisuseremail.replace(".", "dot")
                # thisuserdirectory='uploadedimages/' + thisuseremail
                thisuserdirectory = 'static'
                # '''uploadedimages/'
                target1 = os.path.join(THIS_DIR, thisuserdirectory)
                target = os.path.join(target1, thisuseremail)
                if not os.path.isdir(target):
                    os.mkdir(target)
                # c, conn = connection()
                filename = linkpdfnamepdf
                filenamehtml = filename[:-3] + 'html'
                destination = "/".join([target, filename])
                destinationhtml = "/".join([target, filenamehtml])
                # # pdfkit.from_url(weblinkname, destination)
                subprocess.call(["wget", "-k", weblinkname,"-O", filenamehtml], shell=False)
                soup = BeautifulSoup(open(filenamehtml), "html.parser")
                new_link = soup.new_tag("link")
                new_link.attrs["href"] = "removeheader.css"
                new_link.attrs["rel"] = "stylesheet"
                soup.head.insert(0, new_link)
                for m in soup.find_all('a'):
                    m.unwrap()
                    # replaceWithChildren()
                # soup = BeautifulSoup(page)
                with open(filenamehtml, "w") as file:
                    file.write(smart_str(soup))
                file.close()
                # subprocess.call(["cp", filenamehtml, "temp.html"], shell=False)
                thiswebpagepdfparam = "--print-to-pdf=" + filename
                #
                subprocess.call(["google-chrome", "--headless", "--disable-gpu", thiswebpagepdfparam, filenamehtml], shell=False)
                subprocess.call(["pdf2htmlEX", "--zoom","3",  filename], shell=False)
                # page = urllib2.urlopen(filenamehtml).read()

                subprocess.call(["mv", filenamehtml, destinationhtml], shell=False)
                subprocess.call(["rm", filename], shell=False)
                # subprocess.call(["mv", filenamehtml, destinationhtml], shell=False)
                thisfileread = open(destinationhtml, 'r')

                thisfilecontent = thisfileread.read()
                thisfile = open(destinationhtml, 'w')
                # re.sub("home*?html", "", thisfile)
                thisfilecontentend = thisfilecontent[-17:]
                thisfilecontent = thisfilecontent[:-17]
                # thisfilecontent = u'-'.join(thisfilecontent, stringtoinsert, thisfilecontentend)
                thisfilecontent = thisfilecontent + stringtoinsert + thisfilecontentend
                thisfile.write(smart_str(thisfilecontent))
                # thisfile.write(thisfilecontent.encode('utf8') + '\n')
                # thisfile.write(thisfilecontent.decode('utf-8').encode('utf-8'))
                thisfile.close()
                bookname =  filename[:-4]

                thisemail = session['email']
                thisbook = Book(email=thisemail,
                                bookname=bookname,
                                booklocation=destinationhtml)
                db.session.add(thisbook)
                db.session.commit()
                flash("File uploaded successfully!!")
                return redirect(url_for('auth.bookdisplay', thisbookname=bookname))
        except Exception as e:
                return render_template("500.html", error=e)


@auth.route('/uploadbooks', methods=['GET', 'POST'])
@login_required
def uploadbooks():

    return render_template("auth/uploadbooks.html")

@auth.route('/termsnconditions')
def termsnconditions():
    return render_template('termsnconditions.html')

@auth.route('/who')
def who():
    return render_template('who.html')

@auth.route('/why')
def why():
    return render_template('why.html')

@auth.route('/how')
def how():
    return render_template('how.html')

@auth.route('/homepage')
def homepage():
    return render_template('homepage.html')

@auth.route('/delete/<int:id>', methods=['POST'])
def remove(id):
    booktoremove = Book.query.filter_by(id=id).first()
    print(booktoremove.booklocation)
    strintoremove=booktoremove.booklocation[:-4]
    subprocess.call(["rm", "-r", booktoremove.booklocation], shell=False)
    strintoremovepdf=strintoremove+'pdf'
    strintoremovejson = strintoremove + 'json'
    subprocess.call(["rm", "-r", booktoremove.booklocation], shell=False)

    #subprocess.call("rm", "-r", str(booktoremove.booklocation))
    db.session.delete(booktoremove)
    db.session.commit()

    #object = Object.query.get_or_404(id)
    #delete(object)
    return redirect(url_for('auth.bookslist'))